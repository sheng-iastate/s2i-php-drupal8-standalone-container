#!/bin/bash

#Populate varibles from secrets mounted in project
DBHOST=$(cat db/hostname)
DBGRANTUSER=$(cat db/username)
DBGRANTUSERPW=$(cat db/password)

SITE=${SITE:-}
SITEPASSWORD=${SITEPASSWORD:-}
SITEHASHSALT=${SITEHASHSALT:-}
DRUPALADMINPASSWORD=${DRUPALADMINPASSWORD:-}


# Check to see if we have everything set
echo "SITE = '$SITE'"

if [ -z $DBHOST ]; then

	echo "No DBHOST set."
	exit 1;

elif [ -z $DBGRANTUSER ]; then
	
	echo "No DBGRANTUSER set."
	exit 1;

elif [ -z $DBGRANTUSERPW ]; then

	echo "No DBGRANTUSERPW set."
	exit 1;

elif [ -z $SITE ]; then
	
	echo "No SITE set."
	exit 1;

#elif [ -z $SITEPASSWORD ]; then
#	
#	echo "No SITEPASSWORD set."
#	exit 1;
#
#elif [ -z $SITEHASHSALT ]; then
#	
#	echo "No SITEHASHSALT set."
#	exit 1;
	
elif [ -z $DRUPALADMINPASSWORD ]; then
	
	echo "No DRUPALADMINPASSWORD set."
	exit 1;

fi



# copy the build secret key to the home for the builder
mkdir ./.ssh
cp ssh-privatekey ./.ssh/id_rsa
chmod 600 ./.ssh/id_rsa

# Add github to known hosts so the git clones can happen from composer
ssh-keyscan -H github.com >> ./.ssh/known_hosts


set -e

shopt -s dotglob
echo "---> Installing application source..."
mv /tmp/src/* ./

if [ -f composer.json ]; then
  echo "Found 'composer.json', installing dependencies using composer.phar... "

  # Install Composer
  curl https://getcomposer.org/installer | php

  # Change the repo mirror if provided
  if [ -n "$COMPOSER_MIRROR" ]; then
    ./composer.phar config -g repositories.packagist composer $COMPOSER_MIRROR
  fi

  # Install App dependencies using Composer
  ./composer.phar install --no-interaction --no-ansi --optimize-autoloader

  if [ ! -f composer.lock ]; then
    echo -e "\nConsider adding a 'composer.lock' file into your source repository.\n"
  fi
fi


# peform the site install or update if the variables are there
if [ ! -z $DBHOST ] && [ ! -z $DBGRANTUSER ] && [ ! -z $DBGRANTUSERPW ] && [ ! -z $SITE ] && [ ! -z $DRUPALADMINPASSWORD ] 
then

	# if Database already exists than just fail
	DBCHECK=`mysql -u $DBGRANTUSER -p$DBGRANTUSERPW -h $DBHOST --skip-column-names -e "SHOW DATABASES LIKE '$SITE'"` 

	echo "DBCHECK = '$DBCHECK'"
	if [ "$DBCHECK" == "$SITE" ]; then

		# recreate the site files and directories

		echo "Database $SITE already exists"
		if [ -z $SITEPASSWORD ]; then
			echo "Error Database $SITE exists but SITEPASSWORD not set"
			exit 1;
		fi


		if [ ! -z $SITEHASHSALT ]; then
			SITEHASHSALT=$(env LC_CTYPE=C tr -dc A-Z-a-z-0-9 < /dev/urandom | head -c73)
		fi


		# append the db settings
		cat >> web/sites/default/settings.php << EOPHP

\$config_directories['sync'] = 'profiles/iastate8/config/sync';
\$databases['default']['default'] = array (
	'database' => '${SITE}',
	'username' => '${SITE}',
	'password' => '${SITEPASSWORD}'
	'prefix' => ''
	'host' => '${DBHOST}',
	'port' => ''
	'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql'
	'driver' => 'mysql'
); 
\$settings['install_profile'] = 'iastate8'
\$settings['hash_salt'] = '${SITEHASHSALT}';

EOPHP

		# commands to run
		cd web
		drush updatedb -y
		drush cache-rebuild -y
		cd
		
	else

		PASSWORD=$(env LC_CTYPE=C tr -dc A-Z-a-z-0-9 < /dev/urandom | head -c16)
		if [ ! -z $SITEPASSWORD ]; then
			PASSWORD=${SITEPASSWORD}
		fi
		
		echo "Drush site install"
		cd web
		drush site-install iastate8 --db-url=mysql://$SITE:$PASSWORD@$DBHOST/$SITE --db-su=$DBGRANTUSER --db-su-pw=$DBGRANTUSERPW --account-pass=$DRUPALADMINPASSWORD --site-name=$SITE -y
	
		#set the site
		drush config-set system.site name "$SITE" -y
		cd

	fi # end of site install

fi #end of variables set



# Fix source directory permissions
fix-permissions ./


